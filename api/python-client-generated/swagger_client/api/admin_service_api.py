# coding: utf-8

"""
    My Project

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AdminServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_admin_v1_agencies_json_get(self, **kwargs):  # noqa: E501
        """Agencies  # noqa: E501

        All top-level agencies in name order with children also in name order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_admin_v1_agencies_json_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_admin_v1_agencies_json_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_admin_v1_agencies_json_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_admin_v1_agencies_json_get_with_http_info(self, **kwargs):  # noqa: E501
        """Agencies  # noqa: E501

        All top-level agencies in name order with children also in name order  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_admin_v1_agencies_json_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_admin_v1_agencies_json_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/v1/agencies.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_admin_v1_corrections_json_get(self, **kwargs):  # noqa: E501
        """Corrections route returns all eCFR corrections.  # noqa: E501

        The Corrections service can be used to determine all corrections or can be filtered by title, effective date, or correction date.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_admin_v1_corrections_json_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: Restricts results to eCFR corrections that occurred on or before the specified date and that were corrected on or after the specified date. Format: YYYY-MM-DD
        :param str title: Restricts results to the given title number: Format: '1', '2', '50', etc
        :param date error_corrected_date: Returns only corrections that were corrected on the given date. Format: YYYY-MM-DD
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_admin_v1_corrections_json_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_admin_v1_corrections_json_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_admin_v1_corrections_json_get_with_http_info(self, **kwargs):  # noqa: E501
        """Corrections route returns all eCFR corrections.  # noqa: E501

        The Corrections service can be used to determine all corrections or can be filtered by title, effective date, or correction date.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_admin_v1_corrections_json_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _date: Restricts results to eCFR corrections that occurred on or before the specified date and that were corrected on or after the specified date. Format: YYYY-MM-DD
        :param str title: Restricts results to the given title number: Format: '1', '2', '50', etc
        :param date error_corrected_date: Returns only corrections that were corrected on the given date. Format: YYYY-MM-DD
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date', 'title', 'error_corrected_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_admin_v1_corrections_json_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'error_corrected_date' in params:
            query_params.append(('error_corrected_date', params['error_corrected_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/v1/corrections.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_admin_v1_corrections_title_title_json_get(self, title, **kwargs):  # noqa: E501
        """Corrections title route returns all corrections for the supplied title.  # noqa: E501

        The Corrections service can be used to determine all corrections for the given title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_admin_v1_corrections_title_title_json_get(title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title: Restricts results to the given title number: Format: '1', '2', '50', etc (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_admin_v1_corrections_title_title_json_get_with_http_info(title, **kwargs)  # noqa: E501
        else:
            (data) = self.api_admin_v1_corrections_title_title_json_get_with_http_info(title, **kwargs)  # noqa: E501
            return data

    def api_admin_v1_corrections_title_title_json_get_with_http_info(self, title, **kwargs):  # noqa: E501
        """Corrections title route returns all corrections for the supplied title.  # noqa: E501

        The Corrections service can be used to determine all corrections for the given title.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_admin_v1_corrections_title_title_json_get_with_http_info(title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title: Restricts results to the given title number: Format: '1', '2', '50', etc (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_admin_v1_corrections_title_title_json_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `api_admin_v1_corrections_title_title_json_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'title' in params:
            path_params['title'] = params['title']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/admin/v1/corrections/title/{title}.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
