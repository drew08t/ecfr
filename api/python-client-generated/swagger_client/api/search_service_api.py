# coding: utf-8

"""
    My Project

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SearchServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_search_v1_count_get(self, **kwargs):  # noqa: E501
        """Search result count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_v1_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_search_v1_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_search_v1_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search result count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'agency_slugs', '_date', 'last_modified_after', 'last_modified_on_or_after', 'last_modified_before', 'last_modified_on_or_before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_v1_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'agency_slugs' in params:
            query_params.append(('agency_slugs[]', params['agency_slugs']))  # noqa: E501
            collection_formats['agency_slugs[]'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'last_modified_after' in params:
            query_params.append(('last_modified_after', params['last_modified_after']))  # noqa: E501
        if 'last_modified_on_or_after' in params:
            query_params.append(('last_modified_on_or_after', params['last_modified_on_or_after']))  # noqa: E501
        if 'last_modified_before' in params:
            query_params.append(('last_modified_before', params['last_modified_before']))  # noqa: E501
        if 'last_modified_on_or_before' in params:
            query_params.append(('last_modified_on_or_before', params['last_modified_on_or_before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v1/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_v1_counts_daily_get(self, **kwargs):  # noqa: E501
        """Search result counts by date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_counts_daily_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_v1_counts_daily_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_search_v1_counts_daily_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_search_v1_counts_daily_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search result counts by date  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_counts_daily_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'agency_slugs', '_date', 'last_modified_after', 'last_modified_on_or_after', 'last_modified_before', 'last_modified_on_or_before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_v1_counts_daily_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'agency_slugs' in params:
            query_params.append(('agency_slugs[]', params['agency_slugs']))  # noqa: E501
            collection_formats['agency_slugs[]'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'last_modified_after' in params:
            query_params.append(('last_modified_after', params['last_modified_after']))  # noqa: E501
        if 'last_modified_on_or_after' in params:
            query_params.append(('last_modified_on_or_after', params['last_modified_on_or_after']))  # noqa: E501
        if 'last_modified_before' in params:
            query_params.append(('last_modified_before', params['last_modified_before']))  # noqa: E501
        if 'last_modified_on_or_before' in params:
            query_params.append(('last_modified_on_or_before', params['last_modified_on_or_before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v1/counts/daily', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_v1_counts_hierarchy_get(self, **kwargs):  # noqa: E501
        """Search result counts by hierarchy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_counts_hierarchy_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_v1_counts_hierarchy_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_search_v1_counts_hierarchy_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_search_v1_counts_hierarchy_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search result counts by hierarchy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_counts_hierarchy_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'agency_slugs', '_date', 'last_modified_after', 'last_modified_on_or_after', 'last_modified_before', 'last_modified_on_or_before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_v1_counts_hierarchy_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'agency_slugs' in params:
            query_params.append(('agency_slugs[]', params['agency_slugs']))  # noqa: E501
            collection_formats['agency_slugs[]'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'last_modified_after' in params:
            query_params.append(('last_modified_after', params['last_modified_after']))  # noqa: E501
        if 'last_modified_on_or_after' in params:
            query_params.append(('last_modified_on_or_after', params['last_modified_on_or_after']))  # noqa: E501
        if 'last_modified_before' in params:
            query_params.append(('last_modified_before', params['last_modified_before']))  # noqa: E501
        if 'last_modified_on_or_before' in params:
            query_params.append(('last_modified_on_or_before', params['last_modified_on_or_before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v1/counts/hierarchy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_v1_counts_titles_get(self, **kwargs):  # noqa: E501
        """Search result counts by title  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_counts_titles_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_v1_counts_titles_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_search_v1_counts_titles_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_search_v1_counts_titles_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search result counts by title  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_counts_titles_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'agency_slugs', '_date', 'last_modified_after', 'last_modified_on_or_after', 'last_modified_before', 'last_modified_on_or_before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_v1_counts_titles_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'agency_slugs' in params:
            query_params.append(('agency_slugs[]', params['agency_slugs']))  # noqa: E501
            collection_formats['agency_slugs[]'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'last_modified_after' in params:
            query_params.append(('last_modified_after', params['last_modified_after']))  # noqa: E501
        if 'last_modified_on_or_after' in params:
            query_params.append(('last_modified_on_or_after', params['last_modified_on_or_after']))  # noqa: E501
        if 'last_modified_before' in params:
            query_params.append(('last_modified_before', params['last_modified_before']))  # noqa: E501
        if 'last_modified_on_or_before' in params:
            query_params.append(('last_modified_on_or_before', params['last_modified_on_or_before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v1/counts/titles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_v1_results_get(self, **kwargs):  # noqa: E501
        """Search results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_results_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :param int per_page: number of results per page; max of 1,000
        :param int page: page of results; can't paginate beyond 10,000 total results
        :param str order: order of results
        :param str paginate_by: how results should be paginated - 'date' will group results so that all results from a date appear on the same page of pagination. If 'date' is chosen then one of the last_modified_* options is required.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_v1_results_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_search_v1_results_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_search_v1_results_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_results_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :param int per_page: number of results per page; max of 1,000
        :param int page: page of results; can't paginate beyond 10,000 total results
        :param str order: order of results
        :param str paginate_by: how results should be paginated - 'date' will group results so that all results from a date appear on the same page of pagination. If 'date' is chosen then one of the last_modified_* options is required.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'agency_slugs', '_date', 'last_modified_after', 'last_modified_on_or_after', 'last_modified_before', 'last_modified_on_or_before', 'per_page', 'page', 'order', 'paginate_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_v1_results_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'agency_slugs' in params:
            query_params.append(('agency_slugs[]', params['agency_slugs']))  # noqa: E501
            collection_formats['agency_slugs[]'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'last_modified_after' in params:
            query_params.append(('last_modified_after', params['last_modified_after']))  # noqa: E501
        if 'last_modified_on_or_after' in params:
            query_params.append(('last_modified_on_or_after', params['last_modified_on_or_after']))  # noqa: E501
        if 'last_modified_before' in params:
            query_params.append(('last_modified_before', params['last_modified_before']))  # noqa: E501
        if 'last_modified_on_or_before' in params:
            query_params.append(('last_modified_on_or_before', params['last_modified_on_or_before']))  # noqa: E501
        if 'per_page' in params:
            query_params.append(('per_page', params['per_page']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'paginate_by' in params:
            query_params.append(('paginate_by', params['paginate_by']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v1/results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_v1_suggestions_get(self, **kwargs):  # noqa: E501
        """Search suggestions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_suggestions_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_v1_suggestions_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_search_v1_suggestions_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_search_v1_suggestions_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search suggestions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_suggestions_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'agency_slugs', '_date', 'last_modified_after', 'last_modified_on_or_after', 'last_modified_before', 'last_modified_on_or_before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_v1_suggestions_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'agency_slugs' in params:
            query_params.append(('agency_slugs[]', params['agency_slugs']))  # noqa: E501
            collection_formats['agency_slugs[]'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'last_modified_after' in params:
            query_params.append(('last_modified_after', params['last_modified_after']))  # noqa: E501
        if 'last_modified_on_or_after' in params:
            query_params.append(('last_modified_on_or_after', params['last_modified_on_or_after']))  # noqa: E501
        if 'last_modified_before' in params:
            query_params.append(('last_modified_before', params['last_modified_before']))  # noqa: E501
        if 'last_modified_on_or_before' in params:
            query_params.append(('last_modified_on_or_before', params['last_modified_on_or_before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v1/suggestions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_search_v1_summary_get(self, **kwargs):  # noqa: E501
        """Search summary details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_summary_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_search_v1_summary_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_search_v1_summary_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_search_v1_summary_get_with_http_info(self, **kwargs):  # noqa: E501
        """Search summary details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_search_v1_summary_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search term; searches the headings and the full text
        :param list[str] agency_slugs: limit to content currently associated with these agencies (see AdminService agencies endpoint to retrieve a list of agency slugs)
        :param date _date: limit to content present on this date (YYYY-MM-DD)
        :param date last_modified_after: limit to content last modified after this date (YYYY-MM-DD)
        :param date last_modified_on_or_after: limit to content last modified on or after this date (YYYY-MM-DD)
        :param date last_modified_before: limit to content last modified before this date (YYYY-MM-DD)
        :param date last_modified_on_or_before: limit to content last modified on or before this date (YYYY-MM-DD)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'agency_slugs', '_date', 'last_modified_after', 'last_modified_on_or_after', 'last_modified_before', 'last_modified_on_or_before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_search_v1_summary_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'agency_slugs' in params:
            query_params.append(('agency_slugs[]', params['agency_slugs']))  # noqa: E501
            collection_formats['agency_slugs[]'] = 'multi'  # noqa: E501
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501
        if 'last_modified_after' in params:
            query_params.append(('last_modified_after', params['last_modified_after']))  # noqa: E501
        if 'last_modified_on_or_after' in params:
            query_params.append(('last_modified_on_or_after', params['last_modified_on_or_after']))  # noqa: E501
        if 'last_modified_before' in params:
            query_params.append(('last_modified_before', params['last_modified_before']))  # noqa: E501
        if 'last_modified_on_or_before' in params:
            query_params.append(('last_modified_on_or_before', params['last_modified_on_or_before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/search/v1/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
