# coding: utf-8

"""
    My Project

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200Meta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'current_page': 'int',
        'total_count': 'int',
        'total_pages': 'int',
        'max_score': 'float',
        'min_date': 'date',
        'max_date': 'date'
    }

    attribute_map = {
        'description': 'description',
        'current_page': 'current_page',
        'total_count': 'total_count',
        'total_pages': 'total_pages',
        'max_score': 'max_score',
        'min_date': 'min_date',
        'max_date': 'max_date'
    }

    def __init__(self, description=None, current_page=None, total_count=None, total_pages=None, max_score=None, min_date=None, max_date=None):  # noqa: E501
        """InlineResponse200Meta - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._current_page = None
        self._total_count = None
        self._total_pages = None
        self._max_score = None
        self._min_date = None
        self._max_date = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if current_page is not None:
            self.current_page = current_page
        if total_count is not None:
            self.total_count = total_count
        if total_pages is not None:
            self.total_pages = total_pages
        if max_score is not None:
            self.max_score = max_score
        if min_date is not None:
            self.min_date = min_date
        if max_date is not None:
            self.max_date = max_date

    @property
    def description(self):
        """Gets the description of this InlineResponse200Meta.  # noqa: E501

        description of the search results  # noqa: E501

        :return: The description of this InlineResponse200Meta.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200Meta.

        description of the search results  # noqa: E501

        :param description: The description of this InlineResponse200Meta.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def current_page(self):
        """Gets the current_page of this InlineResponse200Meta.  # noqa: E501

        current page of results  # noqa: E501

        :return: The current_page of this InlineResponse200Meta.  # noqa: E501
        :rtype: int
        """
        return self._current_page

    @current_page.setter
    def current_page(self, current_page):
        """Sets the current_page of this InlineResponse200Meta.

        current page of results  # noqa: E501

        :param current_page: The current_page of this InlineResponse200Meta.  # noqa: E501
        :type: int
        """

        self._current_page = current_page

    @property
    def total_count(self):
        """Gets the total_count of this InlineResponse200Meta.  # noqa: E501

        total count of matching results across all pages  # noqa: E501

        :return: The total_count of this InlineResponse200Meta.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this InlineResponse200Meta.

        total count of matching results across all pages  # noqa: E501

        :param total_count: The total_count of this InlineResponse200Meta.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def total_pages(self):
        """Gets the total_pages of this InlineResponse200Meta.  # noqa: E501

        total number of pages in the search results  # noqa: E501

        :return: The total_pages of this InlineResponse200Meta.  # noqa: E501
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this InlineResponse200Meta.

        total number of pages in the search results  # noqa: E501

        :param total_pages: The total_pages of this InlineResponse200Meta.  # noqa: E501
        :type: int
        """

        self._total_pages = total_pages

    @property
    def max_score(self):
        """Gets the max_score of this InlineResponse200Meta.  # noqa: E501

        the maximum score of any match in the search  # noqa: E501

        :return: The max_score of this InlineResponse200Meta.  # noqa: E501
        :rtype: float
        """
        return self._max_score

    @max_score.setter
    def max_score(self, max_score):
        """Sets the max_score of this InlineResponse200Meta.

        the maximum score of any match in the search  # noqa: E501

        :param max_score: The max_score of this InlineResponse200Meta.  # noqa: E501
        :type: float
        """

        self._max_score = max_score

    @property
    def min_date(self):
        """Gets the min_date of this InlineResponse200Meta.  # noqa: E501

        the minimum date of all returned results (returned when paginate_by=date option is provided)  # noqa: E501

        :return: The min_date of this InlineResponse200Meta.  # noqa: E501
        :rtype: date
        """
        return self._min_date

    @min_date.setter
    def min_date(self, min_date):
        """Sets the min_date of this InlineResponse200Meta.

        the minimum date of all returned results (returned when paginate_by=date option is provided)  # noqa: E501

        :param min_date: The min_date of this InlineResponse200Meta.  # noqa: E501
        :type: date
        """

        self._min_date = min_date

    @property
    def max_date(self):
        """Gets the max_date of this InlineResponse200Meta.  # noqa: E501

        the maximum date of all returned results (returned when paginate_by=date option is provided)  # noqa: E501

        :return: The max_date of this InlineResponse200Meta.  # noqa: E501
        :rtype: date
        """
        return self._max_date

    @max_date.setter
    def max_date(self, max_date):
        """Sets the max_date of this InlineResponse200Meta.

        the maximum date of all returned results (returned when paginate_by=date option is provided)  # noqa: E501

        :param max_date: The max_date of this InlineResponse200Meta.  # noqa: E501
        :type: date
        """

        self._max_date = max_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200Meta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200Meta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
